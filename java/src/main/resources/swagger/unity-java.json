{
  "swagger": "2.0",
  "info": {
    "title": "Unity java server endpoints",
    "description": "All the endpoints and their requests/responses",
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "schemes": [
    "http"
  ],
  "paths": {
    "/video": {
      "post": {
        "summary": "Saves game recording",
        "description": "Saves game recording inside resource/video directory",
        "consumes": [
          "video/mp4"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Game"
          },
          {
            "$ref": "#/parameters/Build"
          },
          {
            "$ref": "#/parameters/File"
          }
        ],
        "responses": {
          "200": {
            "description": "Video saved on the server",
            "examples": {
              "application/text": "File is uploaded successfully"
            }
          },
          "400": {
            "description": "There were some problems uploading the video",
            "examples": {
              "application/text": "Game directory [game/build] does not exist"
            }
          }
        }
      }
    },
    "/video/recent": {
      "get": {
        "summary": "Returns the most recent video uploaded to the server",
        "description": "Returns the relative path for the most recent video uploaded to the server",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Path to the video",
            "examples": {
              "application/text": "./resources/videos/{gameName}/{buildId}/{playRun}.mp4"
            }
          },
          "400": {
            "description": "Video could not be found",
            "examples": {
              "application/text": "Video could not be found"
            }
          },
          "400": {
            "description": "There are no videos on the server",
            "examples": {
              "application/text": "There are no videos"
            }
          }
        }
      }
    },
    "/bug": {
      "post": {
        "summary": "Saves bug report",
        "description": "Endpoint to receive bug reports from players",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Report"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the saved bug report",
            "schema": {
              "$ref": "#/definitions/BugReportDTO"
            },
            "examples": {
              "application/json": {
                "buildId": "1.0.1",
                "runId": "1.0.1",
                "time": "10",
                "notes": "I walked through a wall"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Returns a list of bug for a specific run",
        "description": "Returns all the bugs for a run",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Game"
          },
          {
            "$ref": "#/parameters/Build"
          },
          {
            "$ref": "#/parameters/RunId"
          }
        ],
        "responses": {
          "200": {
            "description": "All bug reports",
            "schema": {
              "$ref": "#/definitions/BugReportDTOResponse"
            },
            "examples": {
              "BugReportDTOResponse": [
                {
                  "buildId": "1.0.1",
                  "runId": "1.0.1",
                  "time": "10",
                  "notes": "I walked through a wall"
                },
                {
                  "buildId": "1.0.1",
                  "runId": "1.0.1",
                  "time": "100",
                  "notes": "The player glitched"
                }
              ]
            }
          }
        }
      }
    },
    "/game": {
      "get": {
        "summary": "Returns all the game names according to directories on the server",
        "description": "Returns all the game names according to directories on the server",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of game names",
            "examples": {
              "application/text": "[\"testGame\"]"
            }
          }
        }
      },
      "post": {
        "summary": "Create a new directory for a game",
        "description": "Create a new directory for a game",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Game"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the name of the created directory",
            "examples": {
              "application/text": "testGame"
            }
          },
          "400": {
            "description": "Returns an exception, that a new directory was not created",
            "examples": {
              "application/text": "Game directory testGame/ does not exist"
            }
          }
        }
      }
    },
    "/game/build": {
      "get": {
        "summary": "Returns all builds for a game",
        "description": "Returns all builds from a game directory on the server",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Game"
          }
        ],
        "responses": {
          "200": {
            "description": "List of builds",
            "examples": {
              "application/text": "[\"1.0, 1.1\"]"
            }
          },
          "400": {
            "description": "Returns an exception, that game directory does not exist",
            "examples": {
              "application/text": "Game directory testGame/ does not exist"
            }
          }
        }
      },
      "post": {
        "summary": "Create a new directory for a build",
        "description": "Create a new directory for a build inside game directory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Game"
          },
          {
            "$ref": "#/parameters/Build"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the name of the created directory",
            "examples": {
              "application/text": "1.0"
            }
          },
          "400": {
            "description": "Returns an exception, that a new directory was not created",
            "examples": {
              "application/text": "Game directory testGame/1.0 does not exist"
            }
          }
        }
      }
    }
  },
  "parameters": {
    "Game": {
      "description": "Name of the game",
      "name": "game",
      "type": "string",
      "required": true,
      "in": "query",
      "minLength": 1,
      "maxLength": 50
    },
    "Build": {
      "description": "Games build",
      "name": "build",
      "type": "string",
      "required": true,
      "in": "query",
      "minLength": 1,
      "maxLength": 50
    },
    "RunId": {
      "description": "Players run identifier",
      "name": "runId",
      "type": "string",
      "required": true,
      "in": "query",
      "minLength": 1,
      "maxLength": 50
    },
    "File": {
      "description": "Play run recording",
      "name": "file",
      "type": "file",
      "required": true,
      "in": "formData"
    },
    "Report": {
      "description": "Bug report DTO",
      "name": "report",
      "required": true,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/BugReportDTO"
      }
    }
  },
  "definitions": {
    "BugReportDTO": {
      "description": "Bug report DTO",
      "type": "object",
      "required": [
        "game",
        "build",
        "runId",
        "time",
        "notes"
      ],
      "properties": {
        "game": {
          "description": "Name of the game",
          "type": "string",
          "example": "The fun adventures of ...",
          "minLength": 1,
          "maxLength": 50
        },
        "buildId": {
          "description": "Build id identifies which build of a game the bug was reported on",
          "type": "string",
          "example": "1.0.1",
          "minLength": 1,
          "maxLength": 20,
          "pattern": "^\\d+(\\.\\d+)*$"
        },
        "runId": {
          "description": "Run id identifies which run it belongs to",
          "type": "string",
          "example": "1.0.1",
          "minLength": 1,
          "maxLength": 20,
          "pattern": "^\\d+(\\.\\d+)*$"
        },
        "time": {
          "description": "Time of the video where the bug was reported",
          "type": "number",
          "example": "10",
          "minimum": 0
        },
        "notes": {
          "description": "Players notes of what happened",
          "type": "string",
          "example": "I walked through a wall",
          "minLength": 0,
          "maxLength": 1000
        }
      }
    },
    "BugReportDTOResponse": {
      "description": "List of bug reports for a run",
      "type": "array",
      "items": {
        "$ref": "#/definitions/BugReportDTO"
      },
      "example": [
        {
          "buildId": "1.0.1",
          "runId": "1.0.1",
          "time": "10",
          "notes": "I walked through a wall"
        },
        {
          "buildId": "1.0.1",
          "runId": "1.0.1",
          "time": "100",
          "notes": "The player glitched"
        }
      ]
    }
  }
}
